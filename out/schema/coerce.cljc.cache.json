["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Object",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$schema.coerce","~:imports",null,"~:requires",["^ ","~$schema.core","^;","~$schema.spec.core","^<","~$s","^;","~$spec","^<","~$str","~$clojure.string","~$utils","~$schema.utils","^?","^?","~$cljs.reader","^B","~$reader","^B","^A","^A"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$set-matcher",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","~:line",81,"~:column",7,"~:end-line",81,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^P",[["~$schema"]]]]]],"^7","~$schema.coerce/set-matcher","^J","src/cljc/schema/coerce.cljc","^N",18,"~:method-params",["^P",[["^R"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^L",1,"~:variadic?",false,"^K",81,"~:ret-tag",["^6",["~$function","~$clj-nil"]],"^M",81,"~:max-fixed-arity",1,"~:fn-var",true,"^O",["^P",["^Q",["^P",[["^R"]]]]]],"~$coercer!",["^ ","~:schema",["^P",["~$schema.core/->FnSchema","~$output-schema2966",["~$input-schema2968"]]],"^H",null,"^I",["^ ","^O",["^P",["^Q",["^P",[["^R","~$coercion-matcher"]]]]],"^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",46,"^L",9,"^M",46,"^N",17,"^12",["^P",["^13","^14",["^15"]]],"~:doc","Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw).","~:raw-arglists",["^P",["^Q",["^P",[["^R","^16","~:-","~$CoercionMatcher"]]]]]],"^7","~$schema.coerce/coercer!","^J","src/cljc/schema/coerce.cljc","^N",17,"^T",["^P",[["~$G__2971","~$G__2972"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^18",["^P",["^Q",["^P",[["^R","^16","~:-","^19"]]]]],"^K",46,"^X","^Y","^M",46,"^[",2,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^16"]]]]],"^17","Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw)."],"~$safe",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",85,"^L",7,"^M",85,"^N",11,"^O",["^P",["^Q",["^P",[["~$f"]]]]],"^17","Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case."],"^7","~$schema.coerce/safe","^J","src/cljc/schema/coerce.cljc","^N",11,"^T",["^P",[["~$f"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",85,"^X","^Y","^M",85,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$f"]]]]],"^17","Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case."],"~$+string-coercions+",["^ ","^7","~$schema.coerce/+string-coercions+","^J","src/cljc/schema/coerce.cljc","^K",136,"^L",1,"^M",136,"^N",33,"~:no-doc",true,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",136,"^L",15,"^M",136,"^N",33,"^1A",true],"~:tag",["^6",[null,"~$any","^Z"]]],"^19",["^ ","^7","~$schema.coerce/CoercionMatcher","^J","src/cljc/schema/coerce.cljc","^K",21,"^L",1,"^M",21,"^N",21,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",21,"^L",6,"^M",21,"^N",21],"^17","A function from schema to coercion function, or nil if no special coercion is needed.\n   The returned function is applied to the corresponding data before validation (or walking/\n   coercion of its sub-schemas, if applicable)","^1B","~$schema.core/FnSchema"],"~$json-coercion-matcher",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",124,"^L",7,"^M",124,"^N",28,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^17","A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)"],"^7","~$schema.coerce/json-coercion-matcher","^J","src/cljc/schema/coerce.cljc","^N",28,"^T",["^P",[["^R"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",124,"^X",["^6",[null,"^1C","^Y","^Z"]],"^M",124,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^17","A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)"],"~$string->boolean",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",68,"^L",7,"^M",68,"^N",22,"^O",["^P",["^Q",["^P",[["~$s"]]]]],"^17","returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)"],"^7","~$schema.coerce/string->boolean","^J","src/cljc/schema/coerce.cljc","^N",22,"^T",["^P",[["~$s"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",68,"^X",["^6",[null,"~$boolean"]],"^M",68,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$s"]]]]],"^17","returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)"],"~$string-coercion-matcher",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",145,"^L",7,"^M",145,"^N",30,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^17","A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings."],"^7","~$schema.coerce/string-coercion-matcher","^J","src/cljc/schema/coerce.cljc","^N",30,"^T",["^P",[["^R"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",145,"^X",["^6",[null,"^1C","^Y","^Z"]],"^M",145,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^17","A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings."],"~$keyword-enum-matcher",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",74,"^L",7,"^M",74,"^N",27,"^O",["^P",["^Q",["^P",[["^R"]]]]]],"^7","~$schema.coerce/keyword-enum-matcher","^J","src/cljc/schema/coerce.cljc","^N",27,"^T",["^P",[["^R"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",74,"^X",["^6",[null,"^Z"]],"^M",74,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^R"]]]]]],"~$coercer",["^ ","^12",["^P",["^13","~$output-schema2947",["~$input-schema2949"]]],"^H",null,"^I",["^ ","^O",["^P",["^Q",["^P",[["^R","^16"]]]]],"^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",27,"^L",9,"^M",27,"^N",16,"^12",["^P",["^13","^1P",["^1Q"]]],"^17","Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error.","^18",["^P",["^Q",["^P",[["^R","^16","~:-","^19"]]]]]],"^7","~$schema.coerce/coercer","^J","src/cljc/schema/coerce.cljc","^N",16,"^T",["^P",[["~$G__2952","~$G__2953"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^18",["^P",["^Q",["^P",[["^R","^16","~:-","^19"]]]]],"^K",27,"^X","^1C","^M",27,"^[",2,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^16"]]]]],"^17","Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error."],"~$+json-coercions+",["^ ","^7","~$schema.coerce/+json-coercions+","^J","src/cljc/schema/coerce.cljc","^K",112,"^L",1,"^M",112,"^N",31,"^1A",true,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",112,"^L",15,"^M",112,"^N",31,"^1A",true],"^1B",["^6",[null,"^1C","^Z"]]],"~$edn-read-string",["^ ","^7","~$schema.coerce/edn-read-string","^J","src/cljc/schema/coerce.cljc","^K",132,"^L",1,"^M",132,"^N",21,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",132,"^L",6,"^M",132,"^N",21],"^17","Reads one object from a string. Returns nil when string is nil or empty"],"~$string->keyword",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",65,"^L",7,"^M",65,"^N",22,"^O",["^P",["^Q",["^P",[["~$s"]]]]]],"^7","~$schema.coerce/string->keyword","^J","src/cljc/schema/coerce.cljc","^N",22,"^T",["^P",[["~$s"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^K",65,"^X",["^6",[null,"~$cljs.core/Keyword","^Z"]],"^M",65,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$s"]]]]]],"~$string->uuid",["^ ","^H",null,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",102,"^L",6,"^M",102,"^N",18],"^7","~$schema.coerce/string->uuid","^J","src/cljc/schema/coerce.cljc","^N",18,"^T",["^P",[["~$p1__3006#"]]],"^U",null,"^V",["^P",[]],"^L",1,"^W",false,"^K",102,"^X",["^6",[null,"~$cljs.core/UUID"]],"^M",102,"^[",1,"^10",true,"^O",null,"^17","Returns instance of UUID if input is a string.\n   Note: in CLJS, this does not guarantee a specific UUID string representation,\n         similar to #uuid reader"],"~$Schema",["^ ","^7","~$schema.coerce/Schema","^J","src/cljc/schema/coerce.cljc","^K",17,"^L",1,"^M",17,"^N",12,"^I",["^ ","^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",17,"^L",6,"^M",17,"^N",12],"^17","A Schema for Schemas","^1B",["^6",["~$clj","~$cljs.core/MetaFn","^Z"]]],"~$first-matcher",["^ ","^12",["^P",["^13","~$output-schema2987",["~$input-schema2989"]]],"^H",null,"^I",["^ ","^O",["^P",["^Q",["^P",[["~$matchers"]]]]],"^J","/Users/ambrose/Projects/schema-local-dev/master/src/cljc/schema/coerce.cljc","^K",60,"^L",9,"^M",60,"^N",22,"^12",["^P",["^13","^29",["^2:"]]],"^17","Inputs: [matchers :- [CoercionMatcher]]\n  Returns: CoercionMatcher\n\n  A matcher that takes the first match from matchers.","^18",["^P",["^Q",["^P",[["^2;","~:-",["^19"]]]]]]],"^7","~$schema.coerce/first-matcher","^J","src/cljc/schema/coerce.cljc","^N",22,"^T",["^P",[["~$G__2992"]]],"^U",null,"^V",["^P",[null,null]],"^L",1,"^W",false,"^18",["^P",["^Q",["^P",[["^2;","~:-",["^19"]]]]]],"^K",60,"^X","^Y","^M",60,"^[",1,"^10",true,"^O",["^P",["^Q",["^P",[["^2;"]]]]],"^17","Inputs: [matchers :- [CoercionMatcher]]\n  Returns: CoercionMatcher\n\n  A matcher that takes the first match from matchers."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$macros","~$schema.macros","^2A","^2A","^C","^B","^B","^B","~$s","^;","^;","^;","^@","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^11","~$schema.core/Any","^12","~:schema.core/error","~:else","^19","^R","~:value","~:proto-sym","~:type","^2;","~:output","^1O","~$s/Schema","~:error","~:input","~$arg0","^16","^17","~:proto-pred","^28"]],"~:order",["^2H","^2O","^2K","^2N","^R","^12","^2D","^16","^19","^2M","^1O","^17","^2I","^2G","^2L","^2E","^2F","^2J","^11","^2;","^28"]],"^17","Extension of schema for input coercion (coercing an input to match a schema)"]